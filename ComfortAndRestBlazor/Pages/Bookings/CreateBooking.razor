@page "/Bookings/Create"
@inject HttpClient Http




<div class="row">
    <div class="col-lg-8">
        <h1 class="mb-5">New Booking</h1>

        <div class="row mb-3">
            <label class="col-md-4 col-form-label">Tour ID</label>
            <div class="col-md-8">
                <input class="form-control" @bind="BookingData.TourId">
                <span class="text-danger">@Errors["TourId"]?[0]</span>
            </div>
        </div>
        <div class="row mb-3">
            <label class="col-md-4 col-form-label">Client ID</label>
            <div class="col-md-8">
                <input class="form-control" @bind="BookingData.ClientId">
                <span class="text-danger">@Errors["ClientId"]?[0]</span>
            </div>
        </div>
        <div class="row mb-3">
            <label class="col-md-4 col-form-label">Number of people</label>
            <div class="col-md-8">
                <input class="form-control" @bind="BookingData.NumberOfPeople">
                <span class="text-danger">@Errors["NumberOfPeople"]?[0]</span>
            </div>
        </div>
        <div class="row mb-3">
            <label class="col-md-4 col-form-label">Booking Date</label>
            <div class="col-md-8">
                <input type="date" class="form-control" @bind="BookingData.BookingDate" />

                <span class="text-danger">@Errors["BookingDate"]?[0]</span>
            </div>
        </div>
        
       
        <div class="row">
            <div class="offset-mb-4 col-md-4 d-grib">
                <button class="btn btn-primary" @onclick="SaveBooking">Sumbit</button>
            </div>
            <div class="col-md-4 d-grid">
                <a class="btn btn-outline-primary" href="/Tours">Cancel</a>
            </div>
        </div>
    </div>
</div>


@inject NavigationManager navManager
@using System.Text.Json.Nodes

@code {
    public Models.BookingDto BookingData { set; get; } = new();
    public JsonNode Errors { set; get; } = new JsonObject();

    protected async Task SaveBooking()
    {
        var responce = await Http.PostAsJsonAsync("https://localhost:4000/api/Bookings", BookingData);

        if (responce.IsSuccessStatusCode)
        {
            navManager.NavigateTo("/Bookings");
        }
        else
        {
            var strResponse = await responce.Content.ReadAsStringAsync();
            Console.WriteLine("Json Response:\n" + strResponse);

            try
            {
                var jsonResponce = JsonNode.Parse(strResponse);
                Errors = jsonResponce?["errors"] ?? new JsonObject();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error parsing JSON response: {ex.Message}");
                Errors = new JsonObject();
            }
        }
    }
}


@if (Errors != null && Errors.AsObject().Any())
{
    <div class="alert alert-danger">
        <ul>
            @foreach (var error in Errors.AsObject())
            {
                <li>@error.Key: @error.Value.ToString()</li>
            }
        </ul>
    </div>
}